spring:
  neo4j:
    uri: neo4j://localhost:7687
    authentication:
      username: neo4j
      password: password
  data:
    neo4j:
      database: neo4j
    redis:
      host: localhost
      port: 6379
      #password: your_redis_password  # if your Redis server requires a password
      timeout: 5000  # Connection timeout in milliseconds
      jedis:
        pool:
          max-active: 10
          max-idle: 10
          min-idle: 1
          max-wait: 2000  # Max wait time in milliseconds for a connection from the pool
  cache:
    type: redis
    redis:
      enable-statistics: true
      time-to-live: 120000 # 2 minutes
      cache-null-values: true
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: anaconda-consumers-group
      properties:
        spring:
          json:
            trusted:
              packages: '*'
  mail:
    host: localhost
    port: 1025
    username:
    password:
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
            required: false
          ssl:
            enable: false
    debug: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${OAUTH2_RESOURCE_SERVER_JWT_ISSUER_URI} # http://localhost:18080/realms/celestial-forge
  jpa:
    generate-ddl: 'true'
    show-sql: true
    database: default
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
      max_allowed_packet: '2000'
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MySQL8Dialect
  datasource:
    url: ${JDBC_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driverClassName: com.mysql.cj.jdbc.Driver
#    type: com.zaxxer.hikari.HikariDataSource
#    hikari:
#      pool-name: ToDoHikariPool
#      minimum-idle: 5
#      maximum-pool-size: 20
#      connection-timeout: 30000
#      idle-timeout: 600000
#      max-lifetime: 1800000
#      validation-timeout: 5000
#      connection-test-query: SELECT 1
#      leak-detection-threshold: 60000

application:
  banking:
    kafka:
      imps-topic-name: imps-requests-topic
      neft-topic-name: neft-requests-topic
      rtgs-topic-name: rtgs-requests-topic
  feature-flags:
    flagsmith:
      apiKey: ${FLAGSMITH_API_KEY}


logging:
  level:
    graphql: TRACE
    org:
      apache:
        kafka: INFO
      springframework:
        vault: DEBUG
        cloud:
          vault: DEBUG
        security: DEBUG
        graphql: TRACE
      hibernate:
        #        stat: DEBUG
        #        SQL: DEBUG
        #        type.descriptor.sql: TRACE
        orm.jdbc.bind: TRACE

## Spring Boot actuator endpoints
management:
  tracing:
    sampling:
      probability: 1.0
  endpoint:
    health:
      show-details: ALWAYS
      group:
        custom:
          showComponents: always
          showDetails: always
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    circuitbreakers:
      enabled: true
