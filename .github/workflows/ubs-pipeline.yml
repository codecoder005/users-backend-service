name: users-backend-service pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  # Job name is compile
  compile:
    runs-on: ubuntu-latest
    name: Compile Project
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # I don't want entire reposition with sub-branches
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'oracle'
      - name: Compile Project
        run: mvn -B clean compile
  # Job name is unit-test
  unit-test:
    runs-on: ubuntu-latest
    name: Unit-Testing Application
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # I don't want entire reposition with sub-branches
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'oracle'
      - name: Running Unit-Tests
        run: mvn -B clean test
  # Job name is build
  build:
    runs-on: ubuntu-latest
    name: Building Application
    # list of jobs, that this job depends on
    # i.e., if the below list of jobs are not yet completed,
    # then this job will wait
    needs:
      - compile
      - unit-test
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # I don't want entire reposition with sub-branches
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'oracle'
      - name: Building Jar
        run: mvn -B clean package -DskipTests
  # Job name is build-image
  build-image:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs:
      - build
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # I don't want entire reposition with sub-branches

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'oracle'

      - name: Extract Project Version
        id: extract_version
        run: echo "VERSION=$(mvn -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

#      - name: Login to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build & Push to DockerHub
#        uses: docker/build-push-action@v5
#        with:
#          context: . # use '.' when your Dockerfile is in the root directory of the repository
#          file: Dockerfile
#          push: true
#          platforms: linux/amd64
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/users-backend-service:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/users-backend-service:latest
#          build-args: |
#            PROFILE=dev
#            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}

#  deploy:
#    name: Deploy Backend
#    runs-on: ubuntu-latest
#    needs:
#      - build-image
#    steps:
#
#      - name: Create deployment folder
#        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"
#
#      - name: Copy docker-compose file
#        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml
#
#      - name: Set ENV variable and deploy
#        run: |
#          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
#          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
#          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
#          cd ci-cd
#          docker compose -f docker-compose.yml pull -q
#          docker compose -f docker-compose.yml up -d
#          EOF
